require("dotenv").config();
const fs = require("fs");
const csv = require("csv-parser");
const OpenAI = require("openai");

// Load CSV data
let faqData = [];
fs.createReadStream("./data/cdp_documentation.csv")
    .pipe(csv())
    .on("data", (row) => faqData.push(row))
    .on("end", () => console.log("✅ FAQ data loaded."));

// Initialize OpenAI API
const openai = new OpenAI({
    apiKey: process.env.OPENAI_API_KEY
});

// Function to search local documentation
const searchAnswer = (query) => {
    query = query.toLowerCase();
    return faqData.find(faq => faq.question.toLowerCase().includes(query)) || null;
};

// Function to generate OpenAI response
const askOpenAI = async (query) => {
    try {
        const response = await openai.chat.completions.create({
            model: "gpt-3.5-turbo", // Change to "gpt-4" if available
            messages: [{ role: "user", content: query }],
            max_tokens: 250
        });

        return response.choices[0].message.content.trim();
    } catch (error) {
        console.error("❌ OpenAI Error:", error.message);
        return "An error occurred while fetching an AI-generated response.";
    }
};

// Main function to handle queries
const getAnswer = async (query) => {
    try {
        let answer = searchAnswer(query);
        if (answer) {
            return { platform: answer.platform, answer: answer.answer, source: answer.source };
        } else {
            let aiResponse = await askOpenAI(query);
            return { platform: "AI Generated", answer: aiResponse, source: "Generated by AI" };
        }
    } catch (error) {
        console.error("❌ Chatbot Error:", error.message);
        return { error: "An unexpected error occurred while processing your request." };
    }
};

module.exports = { getAnswer };
